package simpledb.execution;

import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate joinPredicate;
    private OpIterator child1;
    private OpIterator child2;
    private TupleDesc tupleDesc;
    private Iterator<Tuple> iterator;
    private final List<Tuple> childTups = new ArrayList<>();
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.joinPredicate = p;
        this.child1 = child1;
        this.child2 = child2;
        this.tupleDesc = TupleDesc.merge(child1.getTupleDesc(),child2.getTupleDesc());

    }

    public JoinPredicate getJoinPredicate() {
        return joinPredicate;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField1Name() {
        int field1 = joinPredicate.getField1();
        TupleDesc tupleDesc = child1.getTupleDesc();
        String fieldName = tupleDesc.getFieldName(field1);
        return fieldName;
    }

    /**
     * @return the field name of join field2. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField2Name() {
        int field2 = joinPredicate.getField2();
        TupleDesc tupleDesc = child2.getTupleDesc();
        String fieldName = tupleDesc.getFieldName(field2);
        return fieldName;
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *         implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return tupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child1.open();
        while(child1.hasNext()){
            Tuple tupleChild1 = child1.next();
            child2.open();
            while(child2.hasNext()){
                Tuple tupleChild2 = child2.next();
                if (joinPredicate.filter(tupleChild1,tupleChild2)){
                    Tuple tuple = new Tuple(tupleDesc);
                    int index = 0;
                    for(int i = 0; i < tupleChild1.getTupleDesc().numFields(); i++){
                        tuple.setField(index++,tupleChild1.getField(i));
                    }
                    for(int i = 0; i < tupleChild2.getTupleDesc().numFields(); i++){
                        tuple.setField(index++,tupleChild2.getField(i));
                    }
                    childTups.add(tuple);
                }
            }
        }
        iterator = childTups.iterator();
        super.open();
    }

    public void close() {
        super.close();
        iterator = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        iterator = childTups.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if(iterator != null){
            if(iterator.hasNext()){
                return iterator.next();
            }
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // TODO: some code goes here
        return null;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // TODO: some code goes here
    }

}
